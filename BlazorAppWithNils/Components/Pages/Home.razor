@page "/"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using BlazorAppWithNils.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@inject IServiceProvider _serviceProvider;
@inject UserManager<Data.ApplicationUser> UserManager
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject TodoListContext _context;
@inject Code.ImplementedHashingHandler _hashingHandler
@* @inject Code.SymetriskEncrypttionHandler _symetriskEncrypttionHandler
 *@
@inject Code.ImplementedAsymetriskEncryptionHandler _asymetriskEncryptionHandler
@attribute [Authorize(Policy = "AuthenticatedUser")]


<PageTitle>Home</PageTitle>

@if (_isAuthenticated)
{
    // Show CPR input box only if a Todo item hasn't been added
    if (!isTodoEntered)
    {
        <div class="cpr-container">
            <h3>Enter Your CPR Number</h3>
            <input type="text" @bind="userCpr" placeholder="Enter CPR number" maxlength="10" pattern="^\d{10}$" required />
            <button @onclick="CprHandling">Submit</button>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <p class="success-message">@successMessage</p>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="error-message">@errorMessage</p>
            }
        </div>
    }
}

@if (isCprRegistered && isTodoEntered)
{
    <div class="todo-container">
        <h3>Create your Items </h3>
        <input type="text" class="todo-input" @bind="todoItem" placeholder="Enter Todo item" />
        <button class="todo-submit-button" @onclick="btnSubmitTodoItemClicked">Add Todo</button>
        <br />
        <h3>List of your Items </h3>
        @if (todoLists?.Any() == true)
        {
            <ul class="todo-list">
                @foreach (var item in todoLists)
                {
                    <li>@DecryptTodoItem(item.Item)</li>
                }
            </ul>
        }
        else
        {
            <p>No items in your Todo list.</p>
        }
    </div>
}


<style>
    .cpr-container {
        width: 80%; 
        max-width: 400px;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 20px;
        margin: 20px auto;
        background-color: lightblue;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

        .cpr-container h3 {
            margin-bottom: 15px;
            font-size: 1.5em;
            color: #333;
        }

    .cpr-input {
        width: calc(100% - 24px);
        padding: 12px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 1em;
        transition: border-color 0.3s;
    }

        .cpr-input:focus {
            border-color: #4CAF50; /* Green */
            outline: none;
        }

    .cpr-submit-button {
        width: 100%;
        height: 50px;
        background-color: orange; 
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1em;
        transition: background-color 0.3s;
    }

        .cpr-submit-button:hover {
            background-color: darkorange;
        }

    .success-message {
        color: green;
        margin-top: 10px;
    }

    .error-message {
        color: red;
        margin-top: 10px;
    }


    .todo-container {
        display: flex;
        flex-direction: column; /* Arrange items in a column */
        align-items: center; /* Center items horizontally */
        padding: 20px; /* Add padding around the container */
        border: 1px solid #ccc; /* Optional: border for the todo container */
        border-radius: 8px; /* Rounded corners */
        background-color: #f9f9f9; /* Light background color */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow effect */
        margin: 20px auto; /* Center container in the middle */
        width: 80%; /* Control width of the todo container */
        max-width: 500px; /* Maximum width for larger screens */
    }

    .todo-input {
        width: 90%; /* Full width input */
        padding: 10px; /* Padding inside input */
        margin-bottom: 5px; /* Small space below input */
        border: 1px solid #ccc; /* Border for input */
        border-radius: 4px; /* Rounded corners for input */
        font-size: 1em; /* Input font size */
        transition: border-color 0.3s; /* Smooth border color transition */
    }

        .todo-input:focus {
            border-color: #4CAF50; /* Change border color on focus */
            outline: none; /* Remove default outline */
        }

    .todo-submit-button {
        width: 30%; /* Control button width */
        height: 50px;
        background-color: #4CAF50; /* Green background */
        color: white; /* White text color */
        border: none; /* Remove default border */
        border-radius: 4px; /* Rounded corners */
        cursor: pointer; /* Change cursor to pointer */
        font-size: 1em; /* Set font size */
        transition: background-color 0.3s, transform 0.3s; /* Smooth transition for background and transform */
        margin-top: 5px; /* Small space above the button */
    }

        .todo-submit-button:hover {
            background-color: #45a049; /* Darker green on hover */
            transform: scale(1.05); /* Slightly enlarge on hover */
        }

    .todo-list {
        list-style-type: none; /* Remove bullet points */
        padding: 0; /* Remove padding */
        width: 100%; /* Full width of the container */
    }

        .todo-list li {
            padding: 8px; /* Space inside list items */
            border-bottom: 1px solid #ddd; /* Divider for list items */
        }

            .todo-list li:last-child {
                border-bottom: none; /* Remove border for the last item */
            }

</style>

@code {
    public bool _isAuthenticated;
    private bool isCprRegistered = false;
    private bool isTodoEntered = false; 
    private string userCpr;
    private string todoItem; 
    private List<TodoList>? todoLists;
    private string? successMessage;
    private string? errorMessage;
    private string? _user;


    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authenticationState.User;
        _isAuthenticated = authUser.Identity.IsAuthenticated;
        //_user = authUser.Identity.Name;
      
        if (_isAuthenticated)
        {

            // Then call this to load todos right after registration
            await LoadUserCprAndTodos(authUser);


            //await LoadUserCprAndTodos(authUser);
        }
    }

    
    private async Task CprHandling()
    {
        try
        {
            // Validate CPR input: it must be exactly 10 digits and numeric
            if (string.IsNullOrWhiteSpace(userCpr) || userCpr.Length != 10 || !userCpr.All(char.IsDigit))
            {
                errorMessage = "CPR number must be exactly 10 digits and numeric.";
                successMessage = null;
                return;
            }

            // Retrieve the authenticated user
            var currentUser = await UserManager.GetUserAsync((await _authenticationStateProvider.GetAuthenticationStateAsync()).User);

            if (currentUser != null)
            {
                // Hash the CPR number entered by the user
                string hashedCpr = _hashingHandler.SHA256Hashing(userCpr);

                // Check if the CPR number already exists for the current user
                var existingCpr = await _context.Cprs.FirstOrDefaultAsync(c => c.User == currentUser.UserName);

                // If no CPR record exists for the user, register a new CPR
                if (existingCpr == null)
                {
                    var newCpr = new Cpr
                        {
                            CprNr = hashedCpr, // Store the hashed CPR
                            User = currentUser.UserName // Link the CPR to the current user
                        };

                    // Add the new CPR to the database
                    _context.Cprs.Add(newCpr);
                    await _context.SaveChangesAsync();

                    // CPR is successfully registered, set flag to allow todo entry
                    isTodoEntered = true;
                    successMessage = "CPR number registered successfully! Now you can add Todo items.";
                    errorMessage = null;
                }
                // If CPR exists, check if the hashed CPR matches the existing record
                else if (existingCpr.CprNr == hashedCpr)
                {
                    // Hashed CPR matches - allow access to the Todo list
                    successMessage = "CPR number matches! Redirecting to Todo List...";
                    isTodoEntered = true; // Set flag to allow todo entry
                    errorMessage = null;
                }
                else
                {
                    // CPR does not match the records - show an error
                    errorMessage = "CPR number does not match the records. Please try again.";
                    successMessage = null;
                }
            }
            else
            {
                // Handle unauthenticated user scenario
                errorMessage = "User is not authenticated.";
                successMessage = null;
            }

            // Reload user data and todos
            var authUser = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
            await LoadUserCprAndTodos(authUser);
            StateHasChanged();  // Refresh UI
        }
        catch (Exception ex)
        {
            // Handle any exceptions during the process
            errorMessage = $"Error: {ex.Message}";
            successMessage = null;
        }
    }


    private async Task btnSubmitTodoItemClicked()
    {
        if (!isCprRegistered)
        {
            errorMessage = "You must register a CPR number before adding Todo items.";
            return;
        }

        // Retrieve the current authentication state
        var authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authenticationState.User;

        // Find the currently authenticated user
        var currentUser = await UserManager.GetUserAsync(authUser);

        if (currentUser == null)
        {
            errorMessage = "User is not authenticated.";
            return;
        }
        string encryptedTodoItem = _asymetriskEncryptionHandler.EncryptAsymetrisk(todoItem);

        // Retrieve the CPR associated with the user
        var userCpr = await _context.Cprs.FirstOrDefaultAsync(c => c.User == currentUser.UserName);
        if (userCpr == null)
        {
            errorMessage = "No CPR record found for the current user.";
            return;
        }

        // Add the new Todo item
        var newTodo = new TodoList
            {
                UserId = userCpr.Cprid,
                Item = encryptedTodoItem
            };

        _context.TodoLists.Add(newTodo);
        await _context.SaveChangesAsync();

        // Clear the Todo item input and update the success message
        todoItem = string.Empty;
        successMessage = "Todo item added successfully!";
        errorMessage = null;

        // Set isTodoEntered to true to hide CPR box
        isTodoEntered = true;

        // Reload the user's CPR and Todo list
        await LoadUserCprAndTodos(authUser);
        StateHasChanged();
    }
    // Decrypt a todo item for display
    private string DecryptTodoItem(string encryptedItem)
    {
        try
        {
            // Decrypt the Todo item
            return _asymetriskEncryptionHandler.DecryptAsymetrisk(encryptedItem);
        }
        catch
        {
            return "Decryption failed";
        }
    }


    private async Task LoadUserCprAndTodos(ClaimsPrincipal authUser)
    {
        var currentUser = await UserManager.GetUserAsync(authUser);
        var registeredCpr = await _context.Cprs.FirstOrDefaultAsync(c => c.User == currentUser.UserName);
        isCprRegistered = registeredCpr != null;

        if (isCprRegistered)
        {
            todoLists = await _context.TodoLists.Where(t => t.UserId == registeredCpr.Cprid).ToListAsync();
        }
        else
        {
            todoLists = new List<TodoList>();
        }
    }
}

